// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebSiteTest.Areas.ThriftShop.Models
{
    public partial class ComperWebSiteContext : DbContext
    {
        public ComperWebSiteContext()
        {
        }

        public ComperWebSiteContext(DbContextOptions<ComperWebSiteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ThriftProducts> ThriftProducts { get; set; }
        public virtual DbSet<ThriftPurchase> ThriftPurchase { get; set; }
        public virtual DbSet<ThriftPurchaseDetail> ThriftPurchaseDetail { get; set; }
        public virtual DbSet<ThriftShopOrderDetail> ThriftShopOrderDetail { get; set; }
        public virtual DbSet<ThriftShopOrders> ThriftShopOrders { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ComperWebSite;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ThriftProducts>(entity =>
            {
                entity.HasKey(e => e.ThriftProductId)
                    .HasName("PK_thriftProducts");

                entity.Property(e => e.ThriftProductId)
                    .HasMaxLength(50)
                    .HasColumnName("thriftProductID");

                entity.Property(e => e.ThriftPicture)
                    .HasMaxLength(50)
                    .HasColumnName("thriftPicture");

                entity.Property(e => e.ThriftProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftProductCategory");

                entity.Property(e => e.ThriftProductName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftProductName");

                entity.Property(e => e.ThriftProductOffDate).HasColumnName("thriftProductOffDate");

                entity.Property(e => e.ThriftProductOnDate).HasColumnName("thriftProductOnDate");

                entity.Property(e => e.ThriftProductQty).HasColumnName("thriftProductQty");

                entity.Property(e => e.ThriftProductStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftProductStatus");

                entity.Property(e => e.ThriftProductSupplierId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftProductSupplierID");

                entity.Property(e => e.ThriftProductUnitPrice).HasColumnName("thriftProductUnitPrice");
            });

            modelBuilder.Entity<ThriftPurchase>(entity =>
            {
                entity.Property(e => e.ThriftPurchaseId)
                    .HasMaxLength(50)
                    .HasColumnName("thriftPurchaseID");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("employeeID");

                entity.Property(e => e.ThriftPurchaseDate)
                    .HasColumnType("date")
                    .HasColumnName("thriftPurchaseDate");

                entity.Property(e => e.ThriftPurchaseState).HasColumnName("thriftPurchaseState");
            });

            modelBuilder.Entity<ThriftPurchaseDetail>(entity =>
            {
                entity.HasKey(e => e.ThriftPurchaseId)
                    .HasName("PK_thriftPurchaseDetail");

                entity.Property(e => e.ThriftPurchaseId)
                    .HasMaxLength(50)
                    .HasColumnName("thriftPurchaseID");

                entity.Property(e => e.ThriftName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftName");

                entity.Property(e => e.ThriftNote)
                    .IsRequired()
                    .HasColumnName("thriftNote");

                entity.Property(e => e.ThriftPrice).HasColumnName("thriftPrice");

                entity.Property(e => e.ThriftQuantity).HasColumnName("thriftQuantity");

                entity.HasOne(d => d.ThriftPurchase)
                    .WithOne(p => p.ThriftPurchaseDetail)
                    .HasForeignKey<ThriftPurchaseDetail>(d => d.ThriftPurchaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ThriftPurchaseDetail_ThriftPurchase");
            });

            modelBuilder.Entity<ThriftShopOrderDetail>(entity =>
            {
                entity.HasKey(e => e.ThriftOrderId)
                    .HasName("PK_thriftShopOrderDetail");

                entity.Property(e => e.ThriftOrderId)
                    .HasMaxLength(50)
                    .HasColumnName("thriftOrderID");

                entity.Property(e => e.ThriftProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftProductID");

                entity.Property(e => e.ThriftProductQty).HasColumnName("thriftProductQty");

                entity.Property(e => e.ThriftProductUnitPrice).HasColumnName("thriftProductUnitPrice");

                entity.HasOne(d => d.ThriftOrder)
                    .WithOne(p => p.ThriftShopOrderDetail)
                    .HasForeignKey<ThriftShopOrderDetail>(d => d.ThriftOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_thriftShopOrderDetail_thriftShopOrders");

                entity.HasOne(d => d.ThriftProduct)
                    .WithMany(p => p.ThriftShopOrderDetail)
                    .HasForeignKey(d => d.ThriftProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_thriftShopOrderDetail_thriftProducts");
            });

            modelBuilder.Entity<ThriftShopOrders>(entity =>
            {
                entity.HasKey(e => e.ThriftOrderId)
                    .HasName("PK_thriftShopOrders");

                entity.Property(e => e.ThriftOrderId)
                    .HasMaxLength(50)
                    .HasColumnName("thriftOrderID");

                entity.Property(e => e.ShippingMethod)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ThriftCustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftCustomerID");

                entity.Property(e => e.ThriftEmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftEmployeeID");

                entity.Property(e => e.ThriftOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("thriftOrderDate");

                entity.Property(e => e.ThriftOrderStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("thriftOrderStatus");

                entity.Property(e => e.ThriftShipAddress)
                    .IsRequired()
                    .HasColumnName("thriftShipAddress");

                entity.Property(e => e.ThriftShipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("thriftShipDate");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}